@model List<Cine_Critic_AI.Models.ChatMessage>
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor

@{
    ViewData["Title"] = "AI Чат бот";
    
    var chatMessages = Model ?? new List<Cine_Critic_AI.Models.ChatMessage>();
}

<div class="chat-card shadow-lg">
    <h2 class="text-center mb-3">🤖 Cine Critic AI Бот</h2>

    @if (HttpContextAccessor.HttpContext.Session.GetInt32("UserId") > 0)
    {
        <p class="text-center text-muted">
            Здравей, <strong>@HttpContextAccessor.HttpContext.Session.GetString("Username")</strong>!
        </p>
    }
    else
    {
        <p class="text-center text-muted">
            Моля, влез в системата, за да използваш чата.
        </p>
    }

    <button id="clearChatBtn" class="btn btn-danger mb-2">Изчисти чата</button>

    <div id="chat-box" class="chat-box">
        @foreach (var msg in chatMessages)
        {
            var cssClass = msg.Sender == "User" ? "user-message" : "bot-message";
            <div class="@cssClass">@msg.Message</div>
        }
    </div>

    <form id="chat-form" class="chat-input-area mt-3">
        <input id="userMessage" type="text" class="form-control" placeholder="Напиши съобщение..." autocomplete="off" />
        <button type="submit" class="btn btn-primary">Изпрати</button>
    </form>
</div>

<style>
    .chat-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 85vh;
        padding: 40px;
    }

    .chat-card {
        background: #fff;
        border-radius: 16px;
        padding: 25px;
        width: 100%;
        max-width: 700px;
        justify-self: center;
        box-shadow: 0 8px 20px rgba(0,0,0,0.25);
    }

    .chat-box {
        height: 400px;
        overflow-y: auto;
        border: 1px solid #e0e0e0;
        border-radius: 10px;
        padding: 15px;
        background: #fafafa;
        display: flex;
        flex-direction: column;
        gap: 10px;
        scroll-behavior: smooth;
    }

    .user-message, .bot-message {
        max-width: 80%;
        padding: 10px 15px;
        border-radius: 12px;
        font-size: 0.95rem;
        word-break: break-word;
    }

    .user-message {
        background: #007bff;
        color: #fff;
        align-self: flex-end;
    }

    .bot-message {
        background: #f1f1f1;
        align-self: flex-start;
    }

    .chat-input-area {
        display: flex;
        gap: 10px;
    }

        .chat-input-area input {
            flex: 1;
            border-radius: 10px;
            padding: 10px;
            border: 1px solid #ccc;
        }

            .chat-input-area input:focus {
                outline: none;
                border-color: #007bff;
                box-shadow: 0 0 5px rgba(0,123,255,0.5);
            }

        .chat-input-area button {
            border-radius: 10px;
            padding: 10px 20px;
        }
</style>

@section Scripts {
    <script>
        const userId = @((HttpContextAccessor.HttpContext.Session.GetInt32("UserId") ?? 0));
        const form = document.getElementById("chat-form");
        const input = document.getElementById("userMessage");
        const chatBox = document.getElementById("chat-box");
        const clearBtn = document.getElementById("clearChatBtn");

        if(form){
            form.addEventListener("submit", async (e) => {
                e.preventDefault();
                const message = input.value.trim();
                if (!message) return;

                const userDiv = document.createElement("div");
                userDiv.className = "user-message";
                userDiv.textContent = message;
                chatBox.appendChild(userDiv);
                input.value = "";

                try {
                    const res = await fetch('@Url.Action("SendMessage", "ChatBot")', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                        body: `userMessage=${encodeURIComponent(message)}&userId=${userId}`
                    });

                    const data = await res.json();
                    const botDiv = document.createElement("div");
                    botDiv.className = "bot-message";
                    botDiv.textContent = data.response;
                    chatBox.appendChild(botDiv);
                    chatBox.scrollTop = chatBox.scrollHeight;
                } catch {
                    const errorDiv = document.createElement("div");
                    errorDiv.className = "bot-message";
                    errorDiv.textContent = "⚠️ Грешка при свързване с AI.";
                    chatBox.appendChild(errorDiv);
                    chatBox.scrollTop = chatBox.scrollHeight;
                }
            });
        }

        if(clearBtn){
            clearBtn.addEventListener("click", async () => {
                if (!confirm("Сигурни ли сте, че искате да изчистите чата?")) return;

                await fetch('@Url.Action("ClearChat", "ChatBot")', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: `userId=${userId}`
                });

                chatBox.innerHTML = "";
            });
        }
    </script>

}
